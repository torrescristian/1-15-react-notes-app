{"version":3,"sources":["components/Note.jsx","components/AddNote.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Container","styled","div","props","editable","Note","id","content","onDelete","onUpdate","contentRef","useRef","useState","setEditable","useEffect","current","innerHTML","className","onClick","message","setTimeout","focus","icon","faPen","faTrashAlt","ref","contentEditable","AddNote","onCreate","App","notes","setNotes","store","get","updateLocalStorage","newNotes","set","handleDelete","console","log","delete","filter","note","handleUpdate","update","map","n","Div","value","nanoid","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+mCAOA,IAAMA,EAAYC,IAAOC,IAAV,KACO,SAACC,GAAD,OAAYA,EAAMC,SAAW,QAAU,UAEvC,SAACD,GAAD,OAAYA,EAAMC,SAAW,aAAe,UAmDnD,SAASC,EAAT,GAAoD,IAApCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC9CC,EAAaC,iBAAO,MADsC,EAEhCC,oBAAS,GAFuB,mBAEzDR,EAFyD,KAE/CS,EAF+C,KAQhE,OAJAC,qBAAU,WACRJ,EAAWK,QAAQC,UAAYT,IAC9B,IAGD,kBAACP,EAAD,CAAWI,SAAUA,GACnB,4BACEa,UAAU,uBACVC,QAAS,WACHd,GACFK,EAAS,CACPH,KACAa,QAAST,EAAWK,QAAQC,YAI3BZ,GACHgB,YAAW,WACTV,EAAWK,QAAQM,UAClB,GAGLR,GAAaT,KAGf,kBAAC,IAAD,CAAiBkB,KAAMC,OAEzB,4BACEN,UAAU,wBACVC,QAAS,WACPV,EAASF,KAGX,kBAAC,IAAD,CAAiBgB,KAAME,OAEzB,yBACEC,IAAKf,EACLO,UAAU,UACVS,gBAAiBtB,K,wlBCpGzB,IAAMJ,EAAYC,IAAOC,IAAV,KAoCA,SAASyB,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SAC1BlB,EAAaC,iBAAO,MAO1B,OACE,kBAAC,EAAD,KACE,yBAAKc,IAAKf,EAAYO,UAAU,UAAUS,gBAAgB,SAC1D,4BAAQT,UAAU,sBAAsBC,QARlB,WACxBU,EAASlB,EAAWK,QAAQC,WAC5BN,EAAWK,QAAQC,UAAY,KAM7B,M,mOCsBSa,MAhEf,WAAgB,IAAD,EACajB,mBAAS,IADtB,mBACNkB,EADM,KACCC,EADD,KAGbjB,qBAAU,WACRiB,EAASC,IAAMC,IAAI,UAAY,MAC9B,IAEH,IAAMC,EAAqB,SAACC,GAC1BH,IAAMI,IAAI,QAASD,IAGfE,EAAe,SAAC/B,GACpBgC,QAAQC,IAAI,CAAEC,OAAQlC,IACtB,IAAM6B,EAAWL,EAAMW,QAAO,SAACC,GAAD,OAAUA,EAAKpC,KAAOA,KACpDyB,EAASI,GACTD,EAAmBC,IAGfQ,EAAe,SAACD,GACpBJ,QAAQC,IAAI,CAAEK,OAAQF,IACtB,IAAMP,EAAWL,EAAMe,KAAI,SAACC,GAAD,OAAQA,EAAExC,KAAOoC,EAAKpC,GAAKoC,EAAOI,KAC7Df,EAASI,GACTD,EAAmBC,IAefY,EAAM9C,IAAOC,IAAV,KAST,OACE,kBAAC6C,EAAD,KACE,kBAACpB,EAAD,CAASC,SAvBK,SAACoB,GACjB,IAAMb,EAAQ,CACZ,CACE7B,GAAI2C,cACJ9B,QAAS6B,IAHC,mBAKTlB,IAELC,EAASI,GACTD,EAAmBC,MAejB,yBAAKlB,UAAU,mBACZa,EAAMe,KAAI,SAACH,EAAMQ,GAAP,OACT,kBAAC7C,EAAD,CACE8C,IAAKT,EAAKpC,GACVA,GAAIoC,EAAKpC,GACTC,QAASmC,EAAKvB,QACdX,SAAU6B,EACV5B,SAAUkC,UCpDFS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMlD,c","file":"static/js/main.b89575c4.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst Container = styled.div`\n  background-color: ${(props) => (props.editable ? 'white' : '#eee')};\n  border-radius: 5px;\n  border: 2px solid ${(props) => (props.editable ? 'dodgerblue' : 'gray')};\n  display: flex;\n  flex-direction: column;\n  margin: 1rem;\n  padding: 0.5rem;\n  position: relative;\n\n  @media (min-width: 600px) {\n    width: 180px;\n    height: fit-content;\n  }\n\n  .content {\n    overflow-wrap: anywhere;\n    padding: 0.5rem;\n  }\n\n  .action-container {\n    position: absolute;\n  }\n\n  .btn {\n    border: unset;\n    height: 25px;\n    width: 25px;\n    border-radius: 50%;\n  }\n\n  .btn-warning {\n    background-color: gold;\n    color: #333;\n  }\n\n  .btn-danger {\n    color: white;\n    background-color: tomato;\n  }\n\n  .delete {\n    top: 5px;\n    right: 5px;\n    position: absolute;\n  }\n\n  .edit {\n    top: 5px;\n    right: 40px;\n    position: absolute;\n  }\n`;\n\nexport default function Note({ id, content, onDelete, onUpdate }) {\n  const contentRef = useRef(null);\n  const [editable, setEditable] = useState(false);\n\n  useEffect(() => {\n    contentRef.current.innerHTML = content;\n  }, []);\n\n  return (\n    <Container editable={editable}>\n      <button\n        className=\"btn btn-warning edit\"\n        onClick={() => {\n          if (editable) {\n            onUpdate({\n              id,\n              message: contentRef.current.innerHTML,\n            });\n          }\n\n          if (!editable) {\n            setTimeout(() => {\n              contentRef.current.focus();\n            }, 0);\n          }\n\n          setEditable(!editable);\n        }}\n      >\n        <FontAwesomeIcon icon={faPen} />\n      </button>\n      <button\n        className=\"btn btn-danger delete\"\n        onClick={() => {\n          onDelete(id);\n        }}\n      >\n        <FontAwesomeIcon icon={faTrashAlt} />\n      </button>\n      <div\n        ref={contentRef}\n        className=\"content\"\n        contentEditable={editable}\n      ></div>\n    </Container>\n  );\n}\n","import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  background-color: white;\n  border-radius: 5px;\n  border: 2px solid gray;\n  display: flex;\n  flex-direction: column;\n  margin: 1rem;\n\n  padding: 0.5rem;\n  position: relative;\n\n  .add {\n    position: absolute;\n    font-size: 1.5rem;\n    bottom: 2px;\n    right: 2px;\n  }\n\n  .btn {\n    border-radius: 50%;\n    border: unset;\n    width: 30px;\n    height: 30px;\n  }\n\n  .btn-success {\n    color: white;\n    background-color: mediumseagreen;\n  }\n\n  .content {\n    height: 3rem;\n    overflow: auto;\n  }\n`;\n\nexport default function AddNote({ onCreate }) {\n  const contentRef = useRef(null);\n\n  const handleSubmitValue = () => {\n    onCreate(contentRef.current.innerHTML);\n    contentRef.current.innerHTML = '';\n  };\n\n  return (\n    <Container>\n      <div ref={contentRef} className=\"content\" contentEditable=\"true\"></div>\n      <button className=\"btn btn-success add\" onClick={handleSubmitValue}>\n        +\n      </button>\n    </Container>\n  );\n}\n","// @ts-check\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport AddNote from './components/AddNote';\nimport { nanoid } from 'nanoid';\nimport store from 'store';\nimport styled from 'styled-components';\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  useEffect(function getInitialNotes() {\n    setNotes(store.get('notes') || []);\n  }, []);\n\n  const updateLocalStorage = (newNotes) => {\n    store.set('notes', newNotes);\n  };\n\n  const handleDelete = (id) => {\n    console.log({ delete: id });\n    const newNotes = notes.filter((note) => note.id !== id);\n    setNotes(newNotes);\n    updateLocalStorage(newNotes);\n  };\n\n  const handleUpdate = (note) => {\n    console.log({ update: note });\n    const newNotes = notes.map((n) => (n.id === note.id ? note : n));\n    setNotes(newNotes);\n    updateLocalStorage(newNotes);\n  };\n\n  const handleAdd = (value) => {\n    const newNotes = [\n      {\n        id: nanoid(),\n        message: value,\n      },\n      ...notes,\n    ];\n    setNotes(newNotes);\n    updateLocalStorage(newNotes);\n  };\n\n  const Div = styled.div`\n    @media (min-width: 600px) {\n      .notes-container {\n        display: flex;\n        flex-wrap: wrap;\n      }\n    }\n  `;\n\n  return (\n    <Div>\n      <AddNote onCreate={handleAdd} />\n      <div className=\"notes-container\">\n        {notes.map((note, index) => (\n          <Note\n            key={note.id}\n            id={note.id}\n            content={note.message}\n            onDelete={handleDelete}\n            onUpdate={handleUpdate}\n          />\n        ))}\n      </div>\n    </Div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}